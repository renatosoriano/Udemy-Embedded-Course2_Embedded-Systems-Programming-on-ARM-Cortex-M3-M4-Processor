
015_task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001200  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080013c4  080013c4  000113c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001470  08001470  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001470  08001470  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001470  08001470  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001470  08001470  00011470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001474  08001474  00011474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000068  080014e0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  080014e0  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000e9e  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000572  00000000  00000000  00020f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  000214a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b8  00000000  00000000  000216a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ca6  00000000  00000000  00021860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001b5b  00000000  00000000  00024506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009992  00000000  00000000  00026061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002f9f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d70  00000000  00000000  0002fa44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080013ac 	.word	0x080013ac

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	080013ac 	.word	0x080013ac

08000204 <delay>:
#include "led.h"



void delay(uint32_t count)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  for(uint32_t i = 0 ; i < count ; i++);
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
 8000210:	e002      	b.n	8000218 <delay+0x14>
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	3301      	adds	r3, #1
 8000216:	60fb      	str	r3, [r7, #12]
 8000218:	68fa      	ldr	r2, [r7, #12]
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	429a      	cmp	r2, r3
 800021e:	d3f8      	bcc.n	8000212 <delay+0xe>
}
 8000220:	bf00      	nop
 8000222:	bf00      	nop
 8000224:	3714      	adds	r7, #20
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr

0800022c <led_init_all>:

void led_init_all(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 8000232:	4b19      	ldr	r3, [pc, #100]	; (8000298 <led_init_all+0x6c>)
 8000234:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 8000236:	4b19      	ldr	r3, [pc, #100]	; (800029c <led_init_all+0x70>)
 8000238:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f043 0208 	orr.w	r2, r3, #8
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 8000276:	200c      	movs	r0, #12
 8000278:	f000 f82a 	bl	80002d0 <led_off>
    led_off(LED_ORANGE);
 800027c:	200d      	movs	r0, #13
 800027e:	f000 f827 	bl	80002d0 <led_off>
    led_off(LED_RED);
 8000282:	200e      	movs	r0, #14
 8000284:	f000 f824 	bl	80002d0 <led_off>
    led_off(LED_BLUE);
 8000288:	200f      	movs	r0, #15
 800028a:	f000 f821 	bl	80002d0 <led_off>



}
 800028e:	bf00      	nop
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40023830 	.word	0x40023830
 800029c:	40020c00 	.word	0x40020c00

080002a0 <led_on>:

void led_on(uint8_t led_no)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 80002aa:	4b08      	ldr	r3, [pc, #32]	; (80002cc <led_on+0x2c>)
 80002ac:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	79fa      	ldrb	r2, [r7, #7]
 80002b4:	2101      	movs	r1, #1
 80002b6:	fa01 f202 	lsl.w	r2, r1, r2
 80002ba:	431a      	orrs	r2, r3
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	601a      	str	r2, [r3, #0]

}
 80002c0:	bf00      	nop
 80002c2:	3714      	adds	r7, #20
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40020c14 	.word	0x40020c14

080002d0 <led_off>:

void led_off(uint8_t led_no)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 80002da:	4b08      	ldr	r3, [pc, #32]	; (80002fc <led_off+0x2c>)
 80002dc:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	79fa      	ldrb	r2, [r7, #7]
 80002e4:	2101      	movs	r1, #1
 80002e6:	fa01 f202 	lsl.w	r2, r1, r2
 80002ea:	43d2      	mvns	r2, r2
 80002ec:	401a      	ands	r2, r3
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	601a      	str	r2, [r3, #0]

}
 80002f2:	bf00      	nop
 80002f4:	3714      	adds	r7, #20
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	40020c14 	.word	0x40020c14

08000300 <main>:

/* Each task has its own TCB */
TCB_t user_tasks[MAX_TASKS];

int main(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0

	enable_processor_faults();
 8000304:	f000 f926 	bl	8000554 <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 8000308:	4807      	ldr	r0, [pc, #28]	; (8000328 <main+0x28>)
 800030a:	f000 f88f 	bl	800042c <init_scheduler_stack>

	init_tasks_stack();
 800030e:	f000 f893 	bl	8000438 <init_tasks_stack>

	led_init_all();
 8000312:	f7ff ff8b 	bl	800022c <led_init_all>

	init_systick_timer(TICK_HZ);
 8000316:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800031a:	f000 f853 	bl	80003c4 <init_systick_timer>

	switch_sp_to_psp();
 800031e:	f000 f99f 	bl	8000660 <switch_sp_to_psp>

	task1_handler();
 8000322:	f000 f807 	bl	8000334 <task1_handler>

	for(;;);
 8000326:	e7fe      	b.n	8000326 <main+0x26>
 8000328:	2001ec00 	.word	0x2001ec00

0800032c <idle_task>:
}


void idle_task(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	while(1);
 8000330:	e7fe      	b.n	8000330 <idle_task+0x4>
	...

08000334 <task1_handler>:
}


void task1_handler(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_GREEN);
 8000338:	200c      	movs	r0, #12
 800033a:	f7ff ffb1 	bl	80002a0 <led_on>
		delay(DELAY_COUNT_1S);
 800033e:	4805      	ldr	r0, [pc, #20]	; (8000354 <task1_handler+0x20>)
 8000340:	f7ff ff60 	bl	8000204 <delay>
		led_off(LED_GREEN);
 8000344:	200c      	movs	r0, #12
 8000346:	f7ff ffc3 	bl	80002d0 <led_off>
		delay(DELAY_COUNT_1S);
 800034a:	4802      	ldr	r0, [pc, #8]	; (8000354 <task1_handler+0x20>)
 800034c:	f7ff ff5a 	bl	8000204 <delay>
		led_on(LED_GREEN);
 8000350:	e7f2      	b.n	8000338 <task1_handler+0x4>
 8000352:	bf00      	nop
 8000354:	001312d0 	.word	0x001312d0

08000358 <task2_handler>:
	}

}

void task2_handler(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_ORANGE);
 800035c:	200d      	movs	r0, #13
 800035e:	f7ff ff9f 	bl	80002a0 <led_on>
		delay(DELAY_COUNT_500MS);
 8000362:	4805      	ldr	r0, [pc, #20]	; (8000378 <task2_handler+0x20>)
 8000364:	f7ff ff4e 	bl	8000204 <delay>
		led_off(LED_ORANGE);
 8000368:	200d      	movs	r0, #13
 800036a:	f7ff ffb1 	bl	80002d0 <led_off>
		delay(DELAY_COUNT_500MS);
 800036e:	4802      	ldr	r0, [pc, #8]	; (8000378 <task2_handler+0x20>)
 8000370:	f7ff ff48 	bl	8000204 <delay>
		led_on(LED_ORANGE);
 8000374:	e7f2      	b.n	800035c <task2_handler+0x4>
 8000376:	bf00      	nop
 8000378:	00098968 	.word	0x00098968

0800037c <task3_handler>:
	}

}

void task3_handler(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_BLUE);
 8000380:	200f      	movs	r0, #15
 8000382:	f7ff ff8d 	bl	80002a0 <led_on>
		delay(DELAY_COUNT_250MS);
 8000386:	4805      	ldr	r0, [pc, #20]	; (800039c <task3_handler+0x20>)
 8000388:	f7ff ff3c 	bl	8000204 <delay>
		led_off(LED_BLUE);
 800038c:	200f      	movs	r0, #15
 800038e:	f7ff ff9f 	bl	80002d0 <led_off>
		delay(DELAY_COUNT_250MS);
 8000392:	4802      	ldr	r0, [pc, #8]	; (800039c <task3_handler+0x20>)
 8000394:	f7ff ff36 	bl	8000204 <delay>
		led_on(LED_BLUE);
 8000398:	e7f2      	b.n	8000380 <task3_handler+0x4>
 800039a:	bf00      	nop
 800039c:	0004c4b4 	.word	0x0004c4b4

080003a0 <task4_handler>:

}

void task4_handler(void)

{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_RED);
 80003a4:	200e      	movs	r0, #14
 80003a6:	f7ff ff7b 	bl	80002a0 <led_on>
		delay(DELAY_COUNT_125MS);
 80003aa:	4805      	ldr	r0, [pc, #20]	; (80003c0 <task4_handler+0x20>)
 80003ac:	f7ff ff2a 	bl	8000204 <delay>
		led_off(LED_RED);
 80003b0:	200e      	movs	r0, #14
 80003b2:	f7ff ff8d 	bl	80002d0 <led_off>
		delay(DELAY_COUNT_125MS);
 80003b6:	4802      	ldr	r0, [pc, #8]	; (80003c0 <task4_handler+0x20>)
 80003b8:	f7ff ff24 	bl	8000204 <delay>
		led_on(LED_RED);
 80003bc:	e7f2      	b.n	80003a4 <task4_handler+0x4>
 80003be:	bf00      	nop
 80003c0:	0002625a 	.word	0x0002625a

080003c4 <init_systick_timer>:

}


void init_systick_timer(uint32_t tick_hz)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b087      	sub	sp, #28
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80003cc:	4b14      	ldr	r3, [pc, #80]	; (8000420 <init_systick_timer+0x5c>)
 80003ce:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80003d0:	4b14      	ldr	r3, [pc, #80]	; (8000424 <init_systick_timer+0x60>)
 80003d2:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 80003d4:	4a14      	ldr	r2, [pc, #80]	; (8000428 <init_systick_timer+0x64>)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80003dc:	3b01      	subs	r3, #1
 80003de:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	681a      	ldr	r2, [r3, #0]
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	431a      	orrs	r2, r3
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f043 0202 	orr.w	r2, r3, #2
 80003fa:	693b      	ldr	r3, [r7, #16]
 80003fc:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 80003fe:	693b      	ldr	r3, [r7, #16]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f043 0204 	orr.w	r2, r3, #4
 8000406:	693b      	ldr	r3, [r7, #16]
 8000408:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f043 0201 	orr.w	r2, r3, #1
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	601a      	str	r2, [r3, #0]

}
 8000416:	bf00      	nop
 8000418:	371c      	adds	r7, #28
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr
 8000420:	e000e014 	.word	0xe000e014
 8000424:	e000e010 	.word	0xe000e010
 8000428:	00f42400 	.word	0x00f42400

0800042c <init_scheduler_stack>:


__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 800042c:	4603      	mov	r3, r0
     __asm volatile("MSR MSP,%0": :  "r" (sched_top_of_stack)  :   );
 800042e:	f383 8808 	msr	MSP, r3
     __asm volatile("BX LR");
 8000432:	4770      	bx	lr

}
 8000434:	bf00      	nop
	...

08000438 <init_tasks_stack>:


/* this function stores dummy stack contents for each task */

void init_tasks_stack(void)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0

	user_tasks[0].current_state = TASK_READY_STATE;
 800043e:	4b3a      	ldr	r3, [pc, #232]	; (8000528 <init_tasks_stack+0xf0>)
 8000440:	2200      	movs	r2, #0
 8000442:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 8000444:	4b38      	ldr	r3, [pc, #224]	; (8000528 <init_tasks_stack+0xf0>)
 8000446:	2200      	movs	r2, #0
 8000448:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 800044a:	4b37      	ldr	r3, [pc, #220]	; (8000528 <init_tasks_stack+0xf0>)
 800044c:	2200      	movs	r2, #0
 800044e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 8000452:	4b35      	ldr	r3, [pc, #212]	; (8000528 <init_tasks_stack+0xf0>)
 8000454:	2200      	movs	r2, #0
 8000456:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 800045a:	4b33      	ldr	r3, [pc, #204]	; (8000528 <init_tasks_stack+0xf0>)
 800045c:	2200      	movs	r2, #0
 800045e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	user_tasks[0].psp_value = IDLE_STACK_START;
 8000462:	4b31      	ldr	r3, [pc, #196]	; (8000528 <init_tasks_stack+0xf0>)
 8000464:	4a31      	ldr	r2, [pc, #196]	; (800052c <init_tasks_stack+0xf4>)
 8000466:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 8000468:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <init_tasks_stack+0xf0>)
 800046a:	4a31      	ldr	r2, [pc, #196]	; (8000530 <init_tasks_stack+0xf8>)
 800046c:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 800046e:	4b2e      	ldr	r3, [pc, #184]	; (8000528 <init_tasks_stack+0xf0>)
 8000470:	4a30      	ldr	r2, [pc, #192]	; (8000534 <init_tasks_stack+0xfc>)
 8000472:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 8000474:	4b2c      	ldr	r3, [pc, #176]	; (8000528 <init_tasks_stack+0xf0>)
 8000476:	4a30      	ldr	r2, [pc, #192]	; (8000538 <init_tasks_stack+0x100>)
 8000478:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 800047a:	4b2b      	ldr	r3, [pc, #172]	; (8000528 <init_tasks_stack+0xf0>)
 800047c:	4a2f      	ldr	r2, [pc, #188]	; (800053c <init_tasks_stack+0x104>)
 800047e:	641a      	str	r2, [r3, #64]	; 0x40

	user_tasks[0].task_handler = idle_task;
 8000480:	4b29      	ldr	r3, [pc, #164]	; (8000528 <init_tasks_stack+0xf0>)
 8000482:	4a2f      	ldr	r2, [pc, #188]	; (8000540 <init_tasks_stack+0x108>)
 8000484:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 8000486:	4b28      	ldr	r3, [pc, #160]	; (8000528 <init_tasks_stack+0xf0>)
 8000488:	4a2e      	ldr	r2, [pc, #184]	; (8000544 <init_tasks_stack+0x10c>)
 800048a:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 800048c:	4b26      	ldr	r3, [pc, #152]	; (8000528 <init_tasks_stack+0xf0>)
 800048e:	4a2e      	ldr	r2, [pc, #184]	; (8000548 <init_tasks_stack+0x110>)
 8000490:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3_handler;
 8000492:	4b25      	ldr	r3, [pc, #148]	; (8000528 <init_tasks_stack+0xf0>)
 8000494:	4a2d      	ldr	r2, [pc, #180]	; (800054c <init_tasks_stack+0x114>)
 8000496:	63da      	str	r2, [r3, #60]	; 0x3c
	user_tasks[4].task_handler = task4_handler;
 8000498:	4b23      	ldr	r3, [pc, #140]	; (8000528 <init_tasks_stack+0xf0>)
 800049a:	4a2d      	ldr	r2, [pc, #180]	; (8000550 <init_tasks_stack+0x118>)
 800049c:	64da      	str	r2, [r3, #76]	; 0x4c


	uint32_t *pPSP;

	for(int i = 0 ; i < MAX_TASKS ;i++)
 800049e:	2300      	movs	r3, #0
 80004a0:	60bb      	str	r3, [r7, #8]
 80004a2:	e037      	b.n	8000514 <init_tasks_stack+0xdc>
	{
		pPSP = (uint32_t*) user_tasks[i].psp_value;
 80004a4:	4a20      	ldr	r2, [pc, #128]	; (8000528 <init_tasks_stack+0xf0>)
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	011b      	lsls	r3, r3, #4
 80004aa:	4413      	add	r3, r2
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	60fb      	str	r3, [r7, #12]

		pPSP--;
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	3b04      	subs	r3, #4
 80004b4:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;//0x01000000
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80004bc:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	3b04      	subs	r3, #4
 80004c2:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t) user_tasks[i].task_handler;
 80004c4:	4a18      	ldr	r2, [pc, #96]	; (8000528 <init_tasks_stack+0xf0>)
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	011b      	lsls	r3, r3, #4
 80004ca:	4413      	add	r3, r2
 80004cc:	330c      	adds	r3, #12
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	461a      	mov	r2, r3
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	3b04      	subs	r3, #4
 80004da:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	f06f 0202 	mvn.w	r2, #2
 80004e2:	601a      	str	r2, [r3, #0]

		for(int j = 0 ; j < 13 ; j++)
 80004e4:	2300      	movs	r3, #0
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	e008      	b.n	80004fc <init_tasks_stack+0xc4>
		{
			pPSP--;
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	3b04      	subs	r3, #4
 80004ee:	60fb      	str	r3, [r7, #12]
		    *pPSP = 0;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
		for(int j = 0 ; j < 13 ; j++)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	3301      	adds	r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2b0c      	cmp	r3, #12
 8000500:	ddf3      	ble.n	80004ea <init_tasks_stack+0xb2>

		}

		user_tasks[i].psp_value = (uint32_t)pPSP;
 8000502:	68fa      	ldr	r2, [r7, #12]
 8000504:	4908      	ldr	r1, [pc, #32]	; (8000528 <init_tasks_stack+0xf0>)
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	011b      	lsls	r3, r3, #4
 800050a:	440b      	add	r3, r1
 800050c:	601a      	str	r2, [r3, #0]
	for(int i = 0 ; i < MAX_TASKS ;i++)
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	3301      	adds	r3, #1
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	2b04      	cmp	r3, #4
 8000518:	ddc4      	ble.n	80004a4 <init_tasks_stack+0x6c>


	}

}
 800051a:	bf00      	nop
 800051c:	bf00      	nop
 800051e:	3714      	adds	r7, #20
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	20000088 	.word	0x20000088
 800052c:	2001f000 	.word	0x2001f000
 8000530:	20020000 	.word	0x20020000
 8000534:	2001fc00 	.word	0x2001fc00
 8000538:	2001f800 	.word	0x2001f800
 800053c:	2001f400 	.word	0x2001f400
 8000540:	0800032d 	.word	0x0800032d
 8000544:	08000335 	.word	0x08000335
 8000548:	08000359 	.word	0x08000359
 800054c:	0800037d 	.word	0x0800037d
 8000550:	080003a1 	.word	0x080003a1

08000554 <enable_processor_faults>:

void enable_processor_faults(void)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <enable_processor_faults+0x38>)
 800055c:	607b      	str	r3, [r7, #4]

	*pSHCSR |= ( 1 << 16); //mem manage
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 17); //bus fault
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 18); //usage fault
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	601a      	str	r2, [r3, #0]
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	e000ed24 	.word	0xe000ed24

08000590 <get_psp_value>:


uint32_t get_psp_value(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

	return user_tasks[current_task].psp_value;
 8000594:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <get_psp_value+0x18>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <get_psp_value+0x1c>)
 800059a:	011b      	lsls	r3, r3, #4
 800059c:	4413      	add	r3, r2
 800059e:	681b      	ldr	r3, [r3, #0]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr
 80005a8:	20000000 	.word	0x20000000
 80005ac:	20000088 	.word	0x20000088

080005b0 <save_psp_value>:


void save_psp_value(uint32_t current_psp_value)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <save_psp_value+0x20>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	4a05      	ldr	r2, [pc, #20]	; (80005d4 <save_psp_value+0x24>)
 80005be:	011b      	lsls	r3, r3, #4
 80005c0:	4413      	add	r3, r2
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	601a      	str	r2, [r3, #0]
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr
 80005d0:	20000000 	.word	0x20000000
 80005d4:	20000088 	.word	0x20000088

080005d8 <update_next_task>:


void update_next_task(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 80005de:	23ff      	movs	r3, #255	; 0xff
 80005e0:	607b      	str	r3, [r7, #4]

	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 80005e2:	2300      	movs	r3, #0
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	e024      	b.n	8000632 <update_next_task+0x5a>
	{
		current_task++;
 80005e8:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <update_next_task+0x7c>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	4b18      	ldr	r3, [pc, #96]	; (8000654 <update_next_task+0x7c>)
 80005f2:	701a      	strb	r2, [r3, #0]
	    current_task %= MAX_TASKS;
 80005f4:	4b17      	ldr	r3, [pc, #92]	; (8000654 <update_next_task+0x7c>)
 80005f6:	781a      	ldrb	r2, [r3, #0]
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <update_next_task+0x80>)
 80005fa:	fba3 1302 	umull	r1, r3, r3, r2
 80005fe:	0899      	lsrs	r1, r3, #2
 8000600:	460b      	mov	r3, r1
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	440b      	add	r3, r1
 8000606:	1ad3      	subs	r3, r2, r3
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <update_next_task+0x7c>)
 800060c:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <update_next_task+0x7c>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	4a12      	ldr	r2, [pc, #72]	; (800065c <update_next_task+0x84>)
 8000614:	011b      	lsls	r3, r3, #4
 8000616:	4413      	add	r3, r2
 8000618:	3308      	adds	r3, #8
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	607b      	str	r3, [r7, #4]
		if( (state == TASK_READY_STATE) && (current_task != 0) )
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d103      	bne.n	800062c <update_next_task+0x54>
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <update_next_task+0x7c>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d106      	bne.n	800063a <update_next_task+0x62>
	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	3301      	adds	r3, #1
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	2b04      	cmp	r3, #4
 8000636:	ddd7      	ble.n	80005e8 <update_next_task+0x10>
 8000638:	e000      	b.n	800063c <update_next_task+0x64>
			break;
 800063a:	bf00      	nop
	}

	if(state != TASK_READY_STATE)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d002      	beq.n	8000648 <update_next_task+0x70>
		current_task = 0;
 8000642:	4b04      	ldr	r3, [pc, #16]	; (8000654 <update_next_task+0x7c>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000000 	.word	0x20000000
 8000658:	cccccccd 	.word	0xcccccccd
 800065c:	20000088 	.word	0x20000088

08000660 <switch_sp_to_psp>:
__attribute__((naked)) void switch_sp_to_psp(void)
{
    //1. initialize the PSP with TASK1 stack start address

	//get the value of psp of current_task
	__asm volatile ("PUSH {LR}"); //preserve LR which connects back to main()
 8000660:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 8000662:	f7ff ff95 	bl	8000590 <get_psp_value>
	__asm volatile ("MSR PSP,R0"); //initialize psp
 8000666:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");  //pops back LR value
 800066a:	f85d eb04 	ldr.w	lr, [sp], #4

	//2. change SP to PSP using CONTROL register
	__asm volatile ("MOV R0,#0X02");
 800066e:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 8000672:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 8000676:	4770      	bx	lr
}
 8000678:	bf00      	nop

0800067a <PendSV_Handler>:
{

	/*Save the context of current task */

	//1. Get current running task's PSP value
	__asm volatile("MRS R0,PSP");
 800067a:	f3ef 8009 	mrs	r0, PSP
	//2. Using that PSP value store SF2( R4 to R11)
	__asm volatile("STMDB R0!,{R4-R11}");
 800067e:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("PUSH {LR}");
 8000682:	b500      	push	{lr}

	//3. Save the current value of PSP
    __asm volatile("BL save_psp_value");
 8000684:	f7ff ff94 	bl	80005b0 <save_psp_value>


	/*Retrieve the context of next task */

	//1. Decide next task to run
    __asm volatile("BL update_next_task");
 8000688:	f7ff ffa6 	bl	80005d8 <update_next_task>

	//2. get its past PSP value
	__asm volatile ("BL get_psp_value");
 800068c:	f7ff ff80 	bl	8000590 <get_psp_value>

	//3. Using that PSP value retrieve SF2(R4 to R11)
	__asm volatile ("LDMIA R0!,{R4-R11}");
 8000690:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//4. update PSP and exit
	__asm volatile("MSR PSP,R0");
 8000694:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 8000698:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");
 800069c:	4770      	bx	lr



}
 800069e:	bf00      	nop

080006a0 <update_global_tick_count>:


void update_global_tick_count(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
	g_tick_count++;
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <update_global_tick_count+0x18>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	4a03      	ldr	r2, [pc, #12]	; (80006b8 <update_global_tick_count+0x18>)
 80006ac:	6013      	str	r3, [r2, #0]
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000084 	.word	0x20000084

080006bc <unblock_tasks>:

void unblock_tasks(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
	for(int i = 1 ; i < MAX_TASKS ; i++)
 80006c2:	2301      	movs	r3, #1
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	e01b      	b.n	8000700 <unblock_tasks+0x44>
	{
		if(user_tasks[i].current_state != TASK_READY_STATE)
 80006c8:	4a12      	ldr	r2, [pc, #72]	; (8000714 <unblock_tasks+0x58>)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	011b      	lsls	r3, r3, #4
 80006ce:	4413      	add	r3, r2
 80006d0:	3308      	adds	r3, #8
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d010      	beq.n	80006fa <unblock_tasks+0x3e>
		{
			if(user_tasks[i].block_count == g_tick_count)
 80006d8:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <unblock_tasks+0x58>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	011b      	lsls	r3, r3, #4
 80006de:	4413      	add	r3, r2
 80006e0:	3304      	adds	r3, #4
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <unblock_tasks+0x5c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d106      	bne.n	80006fa <unblock_tasks+0x3e>
			{
				user_tasks[i].current_state = TASK_READY_STATE;
 80006ec:	4a09      	ldr	r2, [pc, #36]	; (8000714 <unblock_tasks+0x58>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	011b      	lsls	r3, r3, #4
 80006f2:	4413      	add	r3, r2
 80006f4:	3308      	adds	r3, #8
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
	for(int i = 1 ; i < MAX_TASKS ; i++)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	3301      	adds	r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2b04      	cmp	r3, #4
 8000704:	dde0      	ble.n	80006c8 <unblock_tasks+0xc>
			}
		}

	}

}
 8000706:	bf00      	nop
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	20000088 	.word	0x20000088
 8000718:	20000084 	.word	0x20000084

0800071c <SysTick_Handler>:


void  SysTick_Handler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0

	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <SysTick_Handler+0x28>)
 8000724:	607b      	str	r3, [r7, #4]

    update_global_tick_count();
 8000726:	f7ff ffbb 	bl	80006a0 <update_global_tick_count>

    unblock_tasks();
 800072a:	f7ff ffc7 	bl	80006bc <unblock_tasks>

    //pend the pendsv exception
    *pICSR |= ( 1 << 28);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	601a      	str	r2, [r3, #0]
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	e000ed04 	.word	0xe000ed04

08000748 <HardFault_Handler>:

//2. implement the fault handlers
void HardFault_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 800074c:	4801      	ldr	r0, [pc, #4]	; (8000754 <HardFault_Handler+0xc>)
 800074e:	f000 f9a3 	bl	8000a98 <puts>
	while(1);
 8000752:	e7fe      	b.n	8000752 <HardFault_Handler+0xa>
 8000754:	080013c4 	.word	0x080013c4

08000758 <MemManage_Handler>:
}


void MemManage_Handler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 800075c:	4801      	ldr	r0, [pc, #4]	; (8000764 <MemManage_Handler+0xc>)
 800075e:	f000 f99b 	bl	8000a98 <puts>
	while(1);
 8000762:	e7fe      	b.n	8000762 <MemManage_Handler+0xa>
 8000764:	080013dc 	.word	0x080013dc

08000768 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 800076c:	4801      	ldr	r0, [pc, #4]	; (8000774 <BusFault_Handler+0xc>)
 800076e:	f000 f993 	bl	8000a98 <puts>
	while(1);
 8000772:	e7fe      	b.n	8000772 <BusFault_Handler+0xa>
 8000774:	080013f4 	.word	0x080013f4

08000778 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <ITM_SendChar+0x44>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <ITM_SendChar+0x44>)
 8000788:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800078c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <ITM_SendChar+0x48>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <ITM_SendChar+0x48>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800079a:	bf00      	nop
 800079c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d0f8      	beq.n	800079c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80007aa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	6013      	str	r3, [r2, #0]
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	e000edfc 	.word	0xe000edfc
 80007c0:	e0000e00 	.word	0xe0000e00

080007c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	e00a      	b.n	80007ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007d6:	f3af 8000 	nop.w
 80007da:	4601      	mov	r1, r0
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	1c5a      	adds	r2, r3, #1
 80007e0:	60ba      	str	r2, [r7, #8]
 80007e2:	b2ca      	uxtb	r2, r1
 80007e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	3301      	adds	r3, #1
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	697a      	ldr	r2, [r7, #20]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	dbf0      	blt.n	80007d6 <_read+0x12>
	}

return len;
 80007f4:	687b      	ldr	r3, [r7, #4]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3718      	adds	r7, #24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b086      	sub	sp, #24
 8000802:	af00      	add	r7, sp, #0
 8000804:	60f8      	str	r0, [r7, #12]
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	e009      	b.n	8000824 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	1c5a      	adds	r2, r3, #1
 8000814:	60ba      	str	r2, [r7, #8]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ffad 	bl	8000778 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	3301      	adds	r3, #1
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697a      	ldr	r2, [r7, #20]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	429a      	cmp	r2, r3
 800082a:	dbf1      	blt.n	8000810 <_write+0x12>
	}
	return len;
 800082c:	687b      	ldr	r3, [r7, #4]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <_close>:

int _close(int file)
{
 8000836:	b480      	push	{r7}
 8000838:	b083      	sub	sp, #12
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
	return -1;
 800083e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000842:	4618      	mov	r0, r3
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800085c:	605a      	str	r2, [r3, #4]
	return 0;
 800085e:	2300      	movs	r3, #0
}
 8000860:	4618      	mov	r0, r3
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr

0800086a <_isatty>:

int _isatty(int file)
{
 800086a:	b480      	push	{r7}
 800086c:	b083      	sub	sp, #12
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
	return 1;
 8000872:	2301      	movs	r3, #1
}
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr

0800087e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800087e:	b480      	push	{r7}
 8000880:	b085      	sub	sp, #20
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
	return 0;
 800088a:	2300      	movs	r3, #0
}
 800088c:	4618      	mov	r0, r3
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
	...

08000898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a0:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <_sbrk+0x5c>)
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <_sbrk+0x60>)
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d102      	bne.n	80008ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <_sbrk+0x64>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <_sbrk+0x68>)
 80008b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d207      	bcs.n	80008d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c8:	f000 f846 	bl	8000958 <__errno>
 80008cc:	4603      	mov	r3, r0
 80008ce:	220c      	movs	r2, #12
 80008d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008d6:	e009      	b.n	80008ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	4a05      	ldr	r2, [pc, #20]	; (80008fc <_sbrk+0x64>)
 80008e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ea:	68fb      	ldr	r3, [r7, #12]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20020000 	.word	0x20020000
 80008f8:	00000400 	.word	0x00000400
 80008fc:	200000d8 	.word	0x200000d8
 8000900:	200000f0 	.word	0x200000f0

08000904 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000906:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000908:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800090c:	480c      	ldr	r0, [pc, #48]	; (8000940 <LoopForever+0x6>)
  ldr r1, =_edata
 800090e:	490d      	ldr	r1, [pc, #52]	; (8000944 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000910:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <LoopForever+0xe>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000914:	e002      	b.n	800091c <LoopCopyDataInit>

08000916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091a:	3304      	adds	r3, #4

0800091c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800091c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000920:	d3f9      	bcc.n	8000916 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000922:	4a0a      	ldr	r2, [pc, #40]	; (800094c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000924:	4c0a      	ldr	r4, [pc, #40]	; (8000950 <LoopForever+0x16>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000928:	e001      	b.n	800092e <LoopFillZerobss>

0800092a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800092c:	3204      	adds	r2, #4

0800092e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000930:	d3fb      	bcc.n	800092a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000932:	f000 f817 	bl	8000964 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000936:	f7ff fce3 	bl	8000300 <main>

0800093a <LoopForever>:

LoopForever:
    b LoopForever
 800093a:	e7fe      	b.n	800093a <LoopForever>
  ldr   r0, =_estack
 800093c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000944:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000948:	08001478 	.word	0x08001478
  ldr r2, =_sbss
 800094c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000950:	200000ec 	.word	0x200000ec

08000954 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000954:	e7fe      	b.n	8000954 <ADC_IRQHandler>
	...

08000958 <__errno>:
 8000958:	4b01      	ldr	r3, [pc, #4]	; (8000960 <__errno+0x8>)
 800095a:	6818      	ldr	r0, [r3, #0]
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000004 	.word	0x20000004

08000964 <__libc_init_array>:
 8000964:	b570      	push	{r4, r5, r6, lr}
 8000966:	4d0d      	ldr	r5, [pc, #52]	; (800099c <__libc_init_array+0x38>)
 8000968:	4c0d      	ldr	r4, [pc, #52]	; (80009a0 <__libc_init_array+0x3c>)
 800096a:	1b64      	subs	r4, r4, r5
 800096c:	10a4      	asrs	r4, r4, #2
 800096e:	2600      	movs	r6, #0
 8000970:	42a6      	cmp	r6, r4
 8000972:	d109      	bne.n	8000988 <__libc_init_array+0x24>
 8000974:	4d0b      	ldr	r5, [pc, #44]	; (80009a4 <__libc_init_array+0x40>)
 8000976:	4c0c      	ldr	r4, [pc, #48]	; (80009a8 <__libc_init_array+0x44>)
 8000978:	f000 fd18 	bl	80013ac <_init>
 800097c:	1b64      	subs	r4, r4, r5
 800097e:	10a4      	asrs	r4, r4, #2
 8000980:	2600      	movs	r6, #0
 8000982:	42a6      	cmp	r6, r4
 8000984:	d105      	bne.n	8000992 <__libc_init_array+0x2e>
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f855 3b04 	ldr.w	r3, [r5], #4
 800098c:	4798      	blx	r3
 800098e:	3601      	adds	r6, #1
 8000990:	e7ee      	b.n	8000970 <__libc_init_array+0xc>
 8000992:	f855 3b04 	ldr.w	r3, [r5], #4
 8000996:	4798      	blx	r3
 8000998:	3601      	adds	r6, #1
 800099a:	e7f2      	b.n	8000982 <__libc_init_array+0x1e>
 800099c:	08001470 	.word	0x08001470
 80009a0:	08001470 	.word	0x08001470
 80009a4:	08001470 	.word	0x08001470
 80009a8:	08001474 	.word	0x08001474

080009ac <memset>:
 80009ac:	4402      	add	r2, r0
 80009ae:	4603      	mov	r3, r0
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d100      	bne.n	80009b6 <memset+0xa>
 80009b4:	4770      	bx	lr
 80009b6:	f803 1b01 	strb.w	r1, [r3], #1
 80009ba:	e7f9      	b.n	80009b0 <memset+0x4>

080009bc <_puts_r>:
 80009bc:	b570      	push	{r4, r5, r6, lr}
 80009be:	460e      	mov	r6, r1
 80009c0:	4605      	mov	r5, r0
 80009c2:	b118      	cbz	r0, 80009cc <_puts_r+0x10>
 80009c4:	6983      	ldr	r3, [r0, #24]
 80009c6:	b90b      	cbnz	r3, 80009cc <_puts_r+0x10>
 80009c8:	f000 fa44 	bl	8000e54 <__sinit>
 80009cc:	69ab      	ldr	r3, [r5, #24]
 80009ce:	68ac      	ldr	r4, [r5, #8]
 80009d0:	b913      	cbnz	r3, 80009d8 <_puts_r+0x1c>
 80009d2:	4628      	mov	r0, r5
 80009d4:	f000 fa3e 	bl	8000e54 <__sinit>
 80009d8:	4b2c      	ldr	r3, [pc, #176]	; (8000a8c <_puts_r+0xd0>)
 80009da:	429c      	cmp	r4, r3
 80009dc:	d120      	bne.n	8000a20 <_puts_r+0x64>
 80009de:	686c      	ldr	r4, [r5, #4]
 80009e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80009e2:	07db      	lsls	r3, r3, #31
 80009e4:	d405      	bmi.n	80009f2 <_puts_r+0x36>
 80009e6:	89a3      	ldrh	r3, [r4, #12]
 80009e8:	0598      	lsls	r0, r3, #22
 80009ea:	d402      	bmi.n	80009f2 <_puts_r+0x36>
 80009ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009ee:	f000 facf 	bl	8000f90 <__retarget_lock_acquire_recursive>
 80009f2:	89a3      	ldrh	r3, [r4, #12]
 80009f4:	0719      	lsls	r1, r3, #28
 80009f6:	d51d      	bpl.n	8000a34 <_puts_r+0x78>
 80009f8:	6923      	ldr	r3, [r4, #16]
 80009fa:	b1db      	cbz	r3, 8000a34 <_puts_r+0x78>
 80009fc:	3e01      	subs	r6, #1
 80009fe:	68a3      	ldr	r3, [r4, #8]
 8000a00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000a04:	3b01      	subs	r3, #1
 8000a06:	60a3      	str	r3, [r4, #8]
 8000a08:	bb39      	cbnz	r1, 8000a5a <_puts_r+0x9e>
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	da38      	bge.n	8000a80 <_puts_r+0xc4>
 8000a0e:	4622      	mov	r2, r4
 8000a10:	210a      	movs	r1, #10
 8000a12:	4628      	mov	r0, r5
 8000a14:	f000 f848 	bl	8000aa8 <__swbuf_r>
 8000a18:	3001      	adds	r0, #1
 8000a1a:	d011      	beq.n	8000a40 <_puts_r+0x84>
 8000a1c:	250a      	movs	r5, #10
 8000a1e:	e011      	b.n	8000a44 <_puts_r+0x88>
 8000a20:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <_puts_r+0xd4>)
 8000a22:	429c      	cmp	r4, r3
 8000a24:	d101      	bne.n	8000a2a <_puts_r+0x6e>
 8000a26:	68ac      	ldr	r4, [r5, #8]
 8000a28:	e7da      	b.n	80009e0 <_puts_r+0x24>
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <_puts_r+0xd8>)
 8000a2c:	429c      	cmp	r4, r3
 8000a2e:	bf08      	it	eq
 8000a30:	68ec      	ldreq	r4, [r5, #12]
 8000a32:	e7d5      	b.n	80009e0 <_puts_r+0x24>
 8000a34:	4621      	mov	r1, r4
 8000a36:	4628      	mov	r0, r5
 8000a38:	f000 f888 	bl	8000b4c <__swsetup_r>
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	d0dd      	beq.n	80009fc <_puts_r+0x40>
 8000a40:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000a44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a46:	07da      	lsls	r2, r3, #31
 8000a48:	d405      	bmi.n	8000a56 <_puts_r+0x9a>
 8000a4a:	89a3      	ldrh	r3, [r4, #12]
 8000a4c:	059b      	lsls	r3, r3, #22
 8000a4e:	d402      	bmi.n	8000a56 <_puts_r+0x9a>
 8000a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a52:	f000 fa9e 	bl	8000f92 <__retarget_lock_release_recursive>
 8000a56:	4628      	mov	r0, r5
 8000a58:	bd70      	pop	{r4, r5, r6, pc}
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	da04      	bge.n	8000a68 <_puts_r+0xac>
 8000a5e:	69a2      	ldr	r2, [r4, #24]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	dc06      	bgt.n	8000a72 <_puts_r+0xb6>
 8000a64:	290a      	cmp	r1, #10
 8000a66:	d004      	beq.n	8000a72 <_puts_r+0xb6>
 8000a68:	6823      	ldr	r3, [r4, #0]
 8000a6a:	1c5a      	adds	r2, r3, #1
 8000a6c:	6022      	str	r2, [r4, #0]
 8000a6e:	7019      	strb	r1, [r3, #0]
 8000a70:	e7c5      	b.n	80009fe <_puts_r+0x42>
 8000a72:	4622      	mov	r2, r4
 8000a74:	4628      	mov	r0, r5
 8000a76:	f000 f817 	bl	8000aa8 <__swbuf_r>
 8000a7a:	3001      	adds	r0, #1
 8000a7c:	d1bf      	bne.n	80009fe <_puts_r+0x42>
 8000a7e:	e7df      	b.n	8000a40 <_puts_r+0x84>
 8000a80:	6823      	ldr	r3, [r4, #0]
 8000a82:	250a      	movs	r5, #10
 8000a84:	1c5a      	adds	r2, r3, #1
 8000a86:	6022      	str	r2, [r4, #0]
 8000a88:	701d      	strb	r5, [r3, #0]
 8000a8a:	e7db      	b.n	8000a44 <_puts_r+0x88>
 8000a8c:	08001430 	.word	0x08001430
 8000a90:	08001450 	.word	0x08001450
 8000a94:	08001410 	.word	0x08001410

08000a98 <puts>:
 8000a98:	4b02      	ldr	r3, [pc, #8]	; (8000aa4 <puts+0xc>)
 8000a9a:	4601      	mov	r1, r0
 8000a9c:	6818      	ldr	r0, [r3, #0]
 8000a9e:	f7ff bf8d 	b.w	80009bc <_puts_r>
 8000aa2:	bf00      	nop
 8000aa4:	20000004 	.word	0x20000004

08000aa8 <__swbuf_r>:
 8000aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aaa:	460e      	mov	r6, r1
 8000aac:	4614      	mov	r4, r2
 8000aae:	4605      	mov	r5, r0
 8000ab0:	b118      	cbz	r0, 8000aba <__swbuf_r+0x12>
 8000ab2:	6983      	ldr	r3, [r0, #24]
 8000ab4:	b90b      	cbnz	r3, 8000aba <__swbuf_r+0x12>
 8000ab6:	f000 f9cd 	bl	8000e54 <__sinit>
 8000aba:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <__swbuf_r+0x98>)
 8000abc:	429c      	cmp	r4, r3
 8000abe:	d12b      	bne.n	8000b18 <__swbuf_r+0x70>
 8000ac0:	686c      	ldr	r4, [r5, #4]
 8000ac2:	69a3      	ldr	r3, [r4, #24]
 8000ac4:	60a3      	str	r3, [r4, #8]
 8000ac6:	89a3      	ldrh	r3, [r4, #12]
 8000ac8:	071a      	lsls	r2, r3, #28
 8000aca:	d52f      	bpl.n	8000b2c <__swbuf_r+0x84>
 8000acc:	6923      	ldr	r3, [r4, #16]
 8000ace:	b36b      	cbz	r3, 8000b2c <__swbuf_r+0x84>
 8000ad0:	6923      	ldr	r3, [r4, #16]
 8000ad2:	6820      	ldr	r0, [r4, #0]
 8000ad4:	1ac0      	subs	r0, r0, r3
 8000ad6:	6963      	ldr	r3, [r4, #20]
 8000ad8:	b2f6      	uxtb	r6, r6
 8000ada:	4283      	cmp	r3, r0
 8000adc:	4637      	mov	r7, r6
 8000ade:	dc04      	bgt.n	8000aea <__swbuf_r+0x42>
 8000ae0:	4621      	mov	r1, r4
 8000ae2:	4628      	mov	r0, r5
 8000ae4:	f000 f922 	bl	8000d2c <_fflush_r>
 8000ae8:	bb30      	cbnz	r0, 8000b38 <__swbuf_r+0x90>
 8000aea:	68a3      	ldr	r3, [r4, #8]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	60a3      	str	r3, [r4, #8]
 8000af0:	6823      	ldr	r3, [r4, #0]
 8000af2:	1c5a      	adds	r2, r3, #1
 8000af4:	6022      	str	r2, [r4, #0]
 8000af6:	701e      	strb	r6, [r3, #0]
 8000af8:	6963      	ldr	r3, [r4, #20]
 8000afa:	3001      	adds	r0, #1
 8000afc:	4283      	cmp	r3, r0
 8000afe:	d004      	beq.n	8000b0a <__swbuf_r+0x62>
 8000b00:	89a3      	ldrh	r3, [r4, #12]
 8000b02:	07db      	lsls	r3, r3, #31
 8000b04:	d506      	bpl.n	8000b14 <__swbuf_r+0x6c>
 8000b06:	2e0a      	cmp	r6, #10
 8000b08:	d104      	bne.n	8000b14 <__swbuf_r+0x6c>
 8000b0a:	4621      	mov	r1, r4
 8000b0c:	4628      	mov	r0, r5
 8000b0e:	f000 f90d 	bl	8000d2c <_fflush_r>
 8000b12:	b988      	cbnz	r0, 8000b38 <__swbuf_r+0x90>
 8000b14:	4638      	mov	r0, r7
 8000b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <__swbuf_r+0x9c>)
 8000b1a:	429c      	cmp	r4, r3
 8000b1c:	d101      	bne.n	8000b22 <__swbuf_r+0x7a>
 8000b1e:	68ac      	ldr	r4, [r5, #8]
 8000b20:	e7cf      	b.n	8000ac2 <__swbuf_r+0x1a>
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <__swbuf_r+0xa0>)
 8000b24:	429c      	cmp	r4, r3
 8000b26:	bf08      	it	eq
 8000b28:	68ec      	ldreq	r4, [r5, #12]
 8000b2a:	e7ca      	b.n	8000ac2 <__swbuf_r+0x1a>
 8000b2c:	4621      	mov	r1, r4
 8000b2e:	4628      	mov	r0, r5
 8000b30:	f000 f80c 	bl	8000b4c <__swsetup_r>
 8000b34:	2800      	cmp	r0, #0
 8000b36:	d0cb      	beq.n	8000ad0 <__swbuf_r+0x28>
 8000b38:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000b3c:	e7ea      	b.n	8000b14 <__swbuf_r+0x6c>
 8000b3e:	bf00      	nop
 8000b40:	08001430 	.word	0x08001430
 8000b44:	08001450 	.word	0x08001450
 8000b48:	08001410 	.word	0x08001410

08000b4c <__swsetup_r>:
 8000b4c:	4b32      	ldr	r3, [pc, #200]	; (8000c18 <__swsetup_r+0xcc>)
 8000b4e:	b570      	push	{r4, r5, r6, lr}
 8000b50:	681d      	ldr	r5, [r3, #0]
 8000b52:	4606      	mov	r6, r0
 8000b54:	460c      	mov	r4, r1
 8000b56:	b125      	cbz	r5, 8000b62 <__swsetup_r+0x16>
 8000b58:	69ab      	ldr	r3, [r5, #24]
 8000b5a:	b913      	cbnz	r3, 8000b62 <__swsetup_r+0x16>
 8000b5c:	4628      	mov	r0, r5
 8000b5e:	f000 f979 	bl	8000e54 <__sinit>
 8000b62:	4b2e      	ldr	r3, [pc, #184]	; (8000c1c <__swsetup_r+0xd0>)
 8000b64:	429c      	cmp	r4, r3
 8000b66:	d10f      	bne.n	8000b88 <__swsetup_r+0x3c>
 8000b68:	686c      	ldr	r4, [r5, #4]
 8000b6a:	89a3      	ldrh	r3, [r4, #12]
 8000b6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b70:	0719      	lsls	r1, r3, #28
 8000b72:	d42c      	bmi.n	8000bce <__swsetup_r+0x82>
 8000b74:	06dd      	lsls	r5, r3, #27
 8000b76:	d411      	bmi.n	8000b9c <__swsetup_r+0x50>
 8000b78:	2309      	movs	r3, #9
 8000b7a:	6033      	str	r3, [r6, #0]
 8000b7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000b80:	81a3      	strh	r3, [r4, #12]
 8000b82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b86:	e03e      	b.n	8000c06 <__swsetup_r+0xba>
 8000b88:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <__swsetup_r+0xd4>)
 8000b8a:	429c      	cmp	r4, r3
 8000b8c:	d101      	bne.n	8000b92 <__swsetup_r+0x46>
 8000b8e:	68ac      	ldr	r4, [r5, #8]
 8000b90:	e7eb      	b.n	8000b6a <__swsetup_r+0x1e>
 8000b92:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <__swsetup_r+0xd8>)
 8000b94:	429c      	cmp	r4, r3
 8000b96:	bf08      	it	eq
 8000b98:	68ec      	ldreq	r4, [r5, #12]
 8000b9a:	e7e6      	b.n	8000b6a <__swsetup_r+0x1e>
 8000b9c:	0758      	lsls	r0, r3, #29
 8000b9e:	d512      	bpl.n	8000bc6 <__swsetup_r+0x7a>
 8000ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ba2:	b141      	cbz	r1, 8000bb6 <__swsetup_r+0x6a>
 8000ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	d002      	beq.n	8000bb2 <__swsetup_r+0x66>
 8000bac:	4630      	mov	r0, r6
 8000bae:	f000 fa57 	bl	8001060 <_free_r>
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	6363      	str	r3, [r4, #52]	; 0x34
 8000bb6:	89a3      	ldrh	r3, [r4, #12]
 8000bb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000bbc:	81a3      	strh	r3, [r4, #12]
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	6063      	str	r3, [r4, #4]
 8000bc2:	6923      	ldr	r3, [r4, #16]
 8000bc4:	6023      	str	r3, [r4, #0]
 8000bc6:	89a3      	ldrh	r3, [r4, #12]
 8000bc8:	f043 0308 	orr.w	r3, r3, #8
 8000bcc:	81a3      	strh	r3, [r4, #12]
 8000bce:	6923      	ldr	r3, [r4, #16]
 8000bd0:	b94b      	cbnz	r3, 8000be6 <__swsetup_r+0x9a>
 8000bd2:	89a3      	ldrh	r3, [r4, #12]
 8000bd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bdc:	d003      	beq.n	8000be6 <__swsetup_r+0x9a>
 8000bde:	4621      	mov	r1, r4
 8000be0:	4630      	mov	r0, r6
 8000be2:	f000 f9fd 	bl	8000fe0 <__smakebuf_r>
 8000be6:	89a0      	ldrh	r0, [r4, #12]
 8000be8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000bec:	f010 0301 	ands.w	r3, r0, #1
 8000bf0:	d00a      	beq.n	8000c08 <__swsetup_r+0xbc>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60a3      	str	r3, [r4, #8]
 8000bf6:	6963      	ldr	r3, [r4, #20]
 8000bf8:	425b      	negs	r3, r3
 8000bfa:	61a3      	str	r3, [r4, #24]
 8000bfc:	6923      	ldr	r3, [r4, #16]
 8000bfe:	b943      	cbnz	r3, 8000c12 <__swsetup_r+0xc6>
 8000c00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000c04:	d1ba      	bne.n	8000b7c <__swsetup_r+0x30>
 8000c06:	bd70      	pop	{r4, r5, r6, pc}
 8000c08:	0781      	lsls	r1, r0, #30
 8000c0a:	bf58      	it	pl
 8000c0c:	6963      	ldrpl	r3, [r4, #20]
 8000c0e:	60a3      	str	r3, [r4, #8]
 8000c10:	e7f4      	b.n	8000bfc <__swsetup_r+0xb0>
 8000c12:	2000      	movs	r0, #0
 8000c14:	e7f7      	b.n	8000c06 <__swsetup_r+0xba>
 8000c16:	bf00      	nop
 8000c18:	20000004 	.word	0x20000004
 8000c1c:	08001430 	.word	0x08001430
 8000c20:	08001450 	.word	0x08001450
 8000c24:	08001410 	.word	0x08001410

08000c28 <__sflush_r>:
 8000c28:	898a      	ldrh	r2, [r1, #12]
 8000c2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c2c:	4605      	mov	r5, r0
 8000c2e:	0710      	lsls	r0, r2, #28
 8000c30:	460c      	mov	r4, r1
 8000c32:	d457      	bmi.n	8000ce4 <__sflush_r+0xbc>
 8000c34:	684b      	ldr	r3, [r1, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	dc04      	bgt.n	8000c44 <__sflush_r+0x1c>
 8000c3a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	dc01      	bgt.n	8000c44 <__sflush_r+0x1c>
 8000c40:	2000      	movs	r0, #0
 8000c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d0fa      	beq.n	8000c40 <__sflush_r+0x18>
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000c50:	682f      	ldr	r7, [r5, #0]
 8000c52:	602b      	str	r3, [r5, #0]
 8000c54:	d032      	beq.n	8000cbc <__sflush_r+0x94>
 8000c56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000c58:	89a3      	ldrh	r3, [r4, #12]
 8000c5a:	075a      	lsls	r2, r3, #29
 8000c5c:	d505      	bpl.n	8000c6a <__sflush_r+0x42>
 8000c5e:	6863      	ldr	r3, [r4, #4]
 8000c60:	1ac0      	subs	r0, r0, r3
 8000c62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c64:	b10b      	cbz	r3, 8000c6a <__sflush_r+0x42>
 8000c66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c68:	1ac0      	subs	r0, r0, r3
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c70:	6a21      	ldr	r1, [r4, #32]
 8000c72:	4628      	mov	r0, r5
 8000c74:	47b0      	blx	r6
 8000c76:	1c43      	adds	r3, r0, #1
 8000c78:	89a3      	ldrh	r3, [r4, #12]
 8000c7a:	d106      	bne.n	8000c8a <__sflush_r+0x62>
 8000c7c:	6829      	ldr	r1, [r5, #0]
 8000c7e:	291d      	cmp	r1, #29
 8000c80:	d82c      	bhi.n	8000cdc <__sflush_r+0xb4>
 8000c82:	4a29      	ldr	r2, [pc, #164]	; (8000d28 <__sflush_r+0x100>)
 8000c84:	40ca      	lsrs	r2, r1
 8000c86:	07d6      	lsls	r6, r2, #31
 8000c88:	d528      	bpl.n	8000cdc <__sflush_r+0xb4>
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	6062      	str	r2, [r4, #4]
 8000c8e:	04d9      	lsls	r1, r3, #19
 8000c90:	6922      	ldr	r2, [r4, #16]
 8000c92:	6022      	str	r2, [r4, #0]
 8000c94:	d504      	bpl.n	8000ca0 <__sflush_r+0x78>
 8000c96:	1c42      	adds	r2, r0, #1
 8000c98:	d101      	bne.n	8000c9e <__sflush_r+0x76>
 8000c9a:	682b      	ldr	r3, [r5, #0]
 8000c9c:	b903      	cbnz	r3, 8000ca0 <__sflush_r+0x78>
 8000c9e:	6560      	str	r0, [r4, #84]	; 0x54
 8000ca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ca2:	602f      	str	r7, [r5, #0]
 8000ca4:	2900      	cmp	r1, #0
 8000ca6:	d0cb      	beq.n	8000c40 <__sflush_r+0x18>
 8000ca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000cac:	4299      	cmp	r1, r3
 8000cae:	d002      	beq.n	8000cb6 <__sflush_r+0x8e>
 8000cb0:	4628      	mov	r0, r5
 8000cb2:	f000 f9d5 	bl	8001060 <_free_r>
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	6360      	str	r0, [r4, #52]	; 0x34
 8000cba:	e7c2      	b.n	8000c42 <__sflush_r+0x1a>
 8000cbc:	6a21      	ldr	r1, [r4, #32]
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	4628      	mov	r0, r5
 8000cc2:	47b0      	blx	r6
 8000cc4:	1c41      	adds	r1, r0, #1
 8000cc6:	d1c7      	bne.n	8000c58 <__sflush_r+0x30>
 8000cc8:	682b      	ldr	r3, [r5, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d0c4      	beq.n	8000c58 <__sflush_r+0x30>
 8000cce:	2b1d      	cmp	r3, #29
 8000cd0:	d001      	beq.n	8000cd6 <__sflush_r+0xae>
 8000cd2:	2b16      	cmp	r3, #22
 8000cd4:	d101      	bne.n	8000cda <__sflush_r+0xb2>
 8000cd6:	602f      	str	r7, [r5, #0]
 8000cd8:	e7b2      	b.n	8000c40 <__sflush_r+0x18>
 8000cda:	89a3      	ldrh	r3, [r4, #12]
 8000cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce0:	81a3      	strh	r3, [r4, #12]
 8000ce2:	e7ae      	b.n	8000c42 <__sflush_r+0x1a>
 8000ce4:	690f      	ldr	r7, [r1, #16]
 8000ce6:	2f00      	cmp	r7, #0
 8000ce8:	d0aa      	beq.n	8000c40 <__sflush_r+0x18>
 8000cea:	0793      	lsls	r3, r2, #30
 8000cec:	680e      	ldr	r6, [r1, #0]
 8000cee:	bf08      	it	eq
 8000cf0:	694b      	ldreq	r3, [r1, #20]
 8000cf2:	600f      	str	r7, [r1, #0]
 8000cf4:	bf18      	it	ne
 8000cf6:	2300      	movne	r3, #0
 8000cf8:	1bf6      	subs	r6, r6, r7
 8000cfa:	608b      	str	r3, [r1, #8]
 8000cfc:	2e00      	cmp	r6, #0
 8000cfe:	dd9f      	ble.n	8000c40 <__sflush_r+0x18>
 8000d00:	6a21      	ldr	r1, [r4, #32]
 8000d02:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000d06:	4633      	mov	r3, r6
 8000d08:	463a      	mov	r2, r7
 8000d0a:	4628      	mov	r0, r5
 8000d0c:	47e0      	blx	ip
 8000d0e:	2800      	cmp	r0, #0
 8000d10:	dc06      	bgt.n	8000d20 <__sflush_r+0xf8>
 8000d12:	89a3      	ldrh	r3, [r4, #12]
 8000d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d18:	81a3      	strh	r3, [r4, #12]
 8000d1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d1e:	e790      	b.n	8000c42 <__sflush_r+0x1a>
 8000d20:	4407      	add	r7, r0
 8000d22:	1a36      	subs	r6, r6, r0
 8000d24:	e7ea      	b.n	8000cfc <__sflush_r+0xd4>
 8000d26:	bf00      	nop
 8000d28:	20400001 	.word	0x20400001

08000d2c <_fflush_r>:
 8000d2c:	b538      	push	{r3, r4, r5, lr}
 8000d2e:	690b      	ldr	r3, [r1, #16]
 8000d30:	4605      	mov	r5, r0
 8000d32:	460c      	mov	r4, r1
 8000d34:	b913      	cbnz	r3, 8000d3c <_fflush_r+0x10>
 8000d36:	2500      	movs	r5, #0
 8000d38:	4628      	mov	r0, r5
 8000d3a:	bd38      	pop	{r3, r4, r5, pc}
 8000d3c:	b118      	cbz	r0, 8000d46 <_fflush_r+0x1a>
 8000d3e:	6983      	ldr	r3, [r0, #24]
 8000d40:	b90b      	cbnz	r3, 8000d46 <_fflush_r+0x1a>
 8000d42:	f000 f887 	bl	8000e54 <__sinit>
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <_fflush_r+0x6c>)
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d11b      	bne.n	8000d84 <_fflush_r+0x58>
 8000d4c:	686c      	ldr	r4, [r5, #4]
 8000d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d0ef      	beq.n	8000d36 <_fflush_r+0xa>
 8000d56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000d58:	07d0      	lsls	r0, r2, #31
 8000d5a:	d404      	bmi.n	8000d66 <_fflush_r+0x3a>
 8000d5c:	0599      	lsls	r1, r3, #22
 8000d5e:	d402      	bmi.n	8000d66 <_fflush_r+0x3a>
 8000d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d62:	f000 f915 	bl	8000f90 <__retarget_lock_acquire_recursive>
 8000d66:	4628      	mov	r0, r5
 8000d68:	4621      	mov	r1, r4
 8000d6a:	f7ff ff5d 	bl	8000c28 <__sflush_r>
 8000d6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000d70:	07da      	lsls	r2, r3, #31
 8000d72:	4605      	mov	r5, r0
 8000d74:	d4e0      	bmi.n	8000d38 <_fflush_r+0xc>
 8000d76:	89a3      	ldrh	r3, [r4, #12]
 8000d78:	059b      	lsls	r3, r3, #22
 8000d7a:	d4dd      	bmi.n	8000d38 <_fflush_r+0xc>
 8000d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d7e:	f000 f908 	bl	8000f92 <__retarget_lock_release_recursive>
 8000d82:	e7d9      	b.n	8000d38 <_fflush_r+0xc>
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <_fflush_r+0x70>)
 8000d86:	429c      	cmp	r4, r3
 8000d88:	d101      	bne.n	8000d8e <_fflush_r+0x62>
 8000d8a:	68ac      	ldr	r4, [r5, #8]
 8000d8c:	e7df      	b.n	8000d4e <_fflush_r+0x22>
 8000d8e:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <_fflush_r+0x74>)
 8000d90:	429c      	cmp	r4, r3
 8000d92:	bf08      	it	eq
 8000d94:	68ec      	ldreq	r4, [r5, #12]
 8000d96:	e7da      	b.n	8000d4e <_fflush_r+0x22>
 8000d98:	08001430 	.word	0x08001430
 8000d9c:	08001450 	.word	0x08001450
 8000da0:	08001410 	.word	0x08001410

08000da4 <std>:
 8000da4:	2300      	movs	r3, #0
 8000da6:	b510      	push	{r4, lr}
 8000da8:	4604      	mov	r4, r0
 8000daa:	e9c0 3300 	strd	r3, r3, [r0]
 8000dae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000db2:	6083      	str	r3, [r0, #8]
 8000db4:	8181      	strh	r1, [r0, #12]
 8000db6:	6643      	str	r3, [r0, #100]	; 0x64
 8000db8:	81c2      	strh	r2, [r0, #14]
 8000dba:	6183      	str	r3, [r0, #24]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	2208      	movs	r2, #8
 8000dc0:	305c      	adds	r0, #92	; 0x5c
 8000dc2:	f7ff fdf3 	bl	80009ac <memset>
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <std+0x38>)
 8000dc8:	6263      	str	r3, [r4, #36]	; 0x24
 8000dca:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <std+0x3c>)
 8000dcc:	62a3      	str	r3, [r4, #40]	; 0x28
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <std+0x40>)
 8000dd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <std+0x44>)
 8000dd4:	6224      	str	r4, [r4, #32]
 8000dd6:	6323      	str	r3, [r4, #48]	; 0x30
 8000dd8:	bd10      	pop	{r4, pc}
 8000dda:	bf00      	nop
 8000ddc:	0800123d 	.word	0x0800123d
 8000de0:	0800125f 	.word	0x0800125f
 8000de4:	08001297 	.word	0x08001297
 8000de8:	080012bb 	.word	0x080012bb

08000dec <_cleanup_r>:
 8000dec:	4901      	ldr	r1, [pc, #4]	; (8000df4 <_cleanup_r+0x8>)
 8000dee:	f000 b8af 	b.w	8000f50 <_fwalk_reent>
 8000df2:	bf00      	nop
 8000df4:	08000d2d 	.word	0x08000d2d

08000df8 <__sfmoreglue>:
 8000df8:	b570      	push	{r4, r5, r6, lr}
 8000dfa:	2268      	movs	r2, #104	; 0x68
 8000dfc:	1e4d      	subs	r5, r1, #1
 8000dfe:	4355      	muls	r5, r2
 8000e00:	460e      	mov	r6, r1
 8000e02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000e06:	f000 f995 	bl	8001134 <_malloc_r>
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	b140      	cbz	r0, 8000e20 <__sfmoreglue+0x28>
 8000e0e:	2100      	movs	r1, #0
 8000e10:	e9c0 1600 	strd	r1, r6, [r0]
 8000e14:	300c      	adds	r0, #12
 8000e16:	60a0      	str	r0, [r4, #8]
 8000e18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000e1c:	f7ff fdc6 	bl	80009ac <memset>
 8000e20:	4620      	mov	r0, r4
 8000e22:	bd70      	pop	{r4, r5, r6, pc}

08000e24 <__sfp_lock_acquire>:
 8000e24:	4801      	ldr	r0, [pc, #4]	; (8000e2c <__sfp_lock_acquire+0x8>)
 8000e26:	f000 b8b3 	b.w	8000f90 <__retarget_lock_acquire_recursive>
 8000e2a:	bf00      	nop
 8000e2c:	200000dd 	.word	0x200000dd

08000e30 <__sfp_lock_release>:
 8000e30:	4801      	ldr	r0, [pc, #4]	; (8000e38 <__sfp_lock_release+0x8>)
 8000e32:	f000 b8ae 	b.w	8000f92 <__retarget_lock_release_recursive>
 8000e36:	bf00      	nop
 8000e38:	200000dd 	.word	0x200000dd

08000e3c <__sinit_lock_acquire>:
 8000e3c:	4801      	ldr	r0, [pc, #4]	; (8000e44 <__sinit_lock_acquire+0x8>)
 8000e3e:	f000 b8a7 	b.w	8000f90 <__retarget_lock_acquire_recursive>
 8000e42:	bf00      	nop
 8000e44:	200000de 	.word	0x200000de

08000e48 <__sinit_lock_release>:
 8000e48:	4801      	ldr	r0, [pc, #4]	; (8000e50 <__sinit_lock_release+0x8>)
 8000e4a:	f000 b8a2 	b.w	8000f92 <__retarget_lock_release_recursive>
 8000e4e:	bf00      	nop
 8000e50:	200000de 	.word	0x200000de

08000e54 <__sinit>:
 8000e54:	b510      	push	{r4, lr}
 8000e56:	4604      	mov	r4, r0
 8000e58:	f7ff fff0 	bl	8000e3c <__sinit_lock_acquire>
 8000e5c:	69a3      	ldr	r3, [r4, #24]
 8000e5e:	b11b      	cbz	r3, 8000e68 <__sinit+0x14>
 8000e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e64:	f7ff bff0 	b.w	8000e48 <__sinit_lock_release>
 8000e68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000e6c:	6523      	str	r3, [r4, #80]	; 0x50
 8000e6e:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <__sinit+0x68>)
 8000e70:	4a13      	ldr	r2, [pc, #76]	; (8000ec0 <__sinit+0x6c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	62a2      	str	r2, [r4, #40]	; 0x28
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	bf04      	itt	eq
 8000e7a:	2301      	moveq	r3, #1
 8000e7c:	61a3      	streq	r3, [r4, #24]
 8000e7e:	4620      	mov	r0, r4
 8000e80:	f000 f820 	bl	8000ec4 <__sfp>
 8000e84:	6060      	str	r0, [r4, #4]
 8000e86:	4620      	mov	r0, r4
 8000e88:	f000 f81c 	bl	8000ec4 <__sfp>
 8000e8c:	60a0      	str	r0, [r4, #8]
 8000e8e:	4620      	mov	r0, r4
 8000e90:	f000 f818 	bl	8000ec4 <__sfp>
 8000e94:	2200      	movs	r2, #0
 8000e96:	60e0      	str	r0, [r4, #12]
 8000e98:	2104      	movs	r1, #4
 8000e9a:	6860      	ldr	r0, [r4, #4]
 8000e9c:	f7ff ff82 	bl	8000da4 <std>
 8000ea0:	68a0      	ldr	r0, [r4, #8]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2109      	movs	r1, #9
 8000ea6:	f7ff ff7d 	bl	8000da4 <std>
 8000eaa:	68e0      	ldr	r0, [r4, #12]
 8000eac:	2202      	movs	r2, #2
 8000eae:	2112      	movs	r1, #18
 8000eb0:	f7ff ff78 	bl	8000da4 <std>
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	61a3      	str	r3, [r4, #24]
 8000eb8:	e7d2      	b.n	8000e60 <__sinit+0xc>
 8000eba:	bf00      	nop
 8000ebc:	0800140c 	.word	0x0800140c
 8000ec0:	08000ded 	.word	0x08000ded

08000ec4 <__sfp>:
 8000ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec6:	4607      	mov	r7, r0
 8000ec8:	f7ff ffac 	bl	8000e24 <__sfp_lock_acquire>
 8000ecc:	4b1e      	ldr	r3, [pc, #120]	; (8000f48 <__sfp+0x84>)
 8000ece:	681e      	ldr	r6, [r3, #0]
 8000ed0:	69b3      	ldr	r3, [r6, #24]
 8000ed2:	b913      	cbnz	r3, 8000eda <__sfp+0x16>
 8000ed4:	4630      	mov	r0, r6
 8000ed6:	f7ff ffbd 	bl	8000e54 <__sinit>
 8000eda:	3648      	adds	r6, #72	; 0x48
 8000edc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	d503      	bpl.n	8000eec <__sfp+0x28>
 8000ee4:	6833      	ldr	r3, [r6, #0]
 8000ee6:	b30b      	cbz	r3, 8000f2c <__sfp+0x68>
 8000ee8:	6836      	ldr	r6, [r6, #0]
 8000eea:	e7f7      	b.n	8000edc <__sfp+0x18>
 8000eec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000ef0:	b9d5      	cbnz	r5, 8000f28 <__sfp+0x64>
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <__sfp+0x88>)
 8000ef4:	60e3      	str	r3, [r4, #12]
 8000ef6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000efa:	6665      	str	r5, [r4, #100]	; 0x64
 8000efc:	f000 f847 	bl	8000f8e <__retarget_lock_init_recursive>
 8000f00:	f7ff ff96 	bl	8000e30 <__sfp_lock_release>
 8000f04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000f08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000f0c:	6025      	str	r5, [r4, #0]
 8000f0e:	61a5      	str	r5, [r4, #24]
 8000f10:	2208      	movs	r2, #8
 8000f12:	4629      	mov	r1, r5
 8000f14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000f18:	f7ff fd48 	bl	80009ac <memset>
 8000f1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000f20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000f24:	4620      	mov	r0, r4
 8000f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f28:	3468      	adds	r4, #104	; 0x68
 8000f2a:	e7d9      	b.n	8000ee0 <__sfp+0x1c>
 8000f2c:	2104      	movs	r1, #4
 8000f2e:	4638      	mov	r0, r7
 8000f30:	f7ff ff62 	bl	8000df8 <__sfmoreglue>
 8000f34:	4604      	mov	r4, r0
 8000f36:	6030      	str	r0, [r6, #0]
 8000f38:	2800      	cmp	r0, #0
 8000f3a:	d1d5      	bne.n	8000ee8 <__sfp+0x24>
 8000f3c:	f7ff ff78 	bl	8000e30 <__sfp_lock_release>
 8000f40:	230c      	movs	r3, #12
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	e7ee      	b.n	8000f24 <__sfp+0x60>
 8000f46:	bf00      	nop
 8000f48:	0800140c 	.word	0x0800140c
 8000f4c:	ffff0001 	.word	0xffff0001

08000f50 <_fwalk_reent>:
 8000f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f54:	4606      	mov	r6, r0
 8000f56:	4688      	mov	r8, r1
 8000f58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000f5c:	2700      	movs	r7, #0
 8000f5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000f62:	f1b9 0901 	subs.w	r9, r9, #1
 8000f66:	d505      	bpl.n	8000f74 <_fwalk_reent+0x24>
 8000f68:	6824      	ldr	r4, [r4, #0]
 8000f6a:	2c00      	cmp	r4, #0
 8000f6c:	d1f7      	bne.n	8000f5e <_fwalk_reent+0xe>
 8000f6e:	4638      	mov	r0, r7
 8000f70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f74:	89ab      	ldrh	r3, [r5, #12]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d907      	bls.n	8000f8a <_fwalk_reent+0x3a>
 8000f7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	d003      	beq.n	8000f8a <_fwalk_reent+0x3a>
 8000f82:	4629      	mov	r1, r5
 8000f84:	4630      	mov	r0, r6
 8000f86:	47c0      	blx	r8
 8000f88:	4307      	orrs	r7, r0
 8000f8a:	3568      	adds	r5, #104	; 0x68
 8000f8c:	e7e9      	b.n	8000f62 <_fwalk_reent+0x12>

08000f8e <__retarget_lock_init_recursive>:
 8000f8e:	4770      	bx	lr

08000f90 <__retarget_lock_acquire_recursive>:
 8000f90:	4770      	bx	lr

08000f92 <__retarget_lock_release_recursive>:
 8000f92:	4770      	bx	lr

08000f94 <__swhatbuf_r>:
 8000f94:	b570      	push	{r4, r5, r6, lr}
 8000f96:	460e      	mov	r6, r1
 8000f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f9c:	2900      	cmp	r1, #0
 8000f9e:	b096      	sub	sp, #88	; 0x58
 8000fa0:	4614      	mov	r4, r2
 8000fa2:	461d      	mov	r5, r3
 8000fa4:	da08      	bge.n	8000fb8 <__swhatbuf_r+0x24>
 8000fa6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000faa:	2200      	movs	r2, #0
 8000fac:	602a      	str	r2, [r5, #0]
 8000fae:	061a      	lsls	r2, r3, #24
 8000fb0:	d410      	bmi.n	8000fd4 <__swhatbuf_r+0x40>
 8000fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fb6:	e00e      	b.n	8000fd6 <__swhatbuf_r+0x42>
 8000fb8:	466a      	mov	r2, sp
 8000fba:	f000 f9a5 	bl	8001308 <_fstat_r>
 8000fbe:	2800      	cmp	r0, #0
 8000fc0:	dbf1      	blt.n	8000fa6 <__swhatbuf_r+0x12>
 8000fc2:	9a01      	ldr	r2, [sp, #4]
 8000fc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000fc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000fcc:	425a      	negs	r2, r3
 8000fce:	415a      	adcs	r2, r3
 8000fd0:	602a      	str	r2, [r5, #0]
 8000fd2:	e7ee      	b.n	8000fb2 <__swhatbuf_r+0x1e>
 8000fd4:	2340      	movs	r3, #64	; 0x40
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	6023      	str	r3, [r4, #0]
 8000fda:	b016      	add	sp, #88	; 0x58
 8000fdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08000fe0 <__smakebuf_r>:
 8000fe0:	898b      	ldrh	r3, [r1, #12]
 8000fe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000fe4:	079d      	lsls	r5, r3, #30
 8000fe6:	4606      	mov	r6, r0
 8000fe8:	460c      	mov	r4, r1
 8000fea:	d507      	bpl.n	8000ffc <__smakebuf_r+0x1c>
 8000fec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000ff0:	6023      	str	r3, [r4, #0]
 8000ff2:	6123      	str	r3, [r4, #16]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	6163      	str	r3, [r4, #20]
 8000ff8:	b002      	add	sp, #8
 8000ffa:	bd70      	pop	{r4, r5, r6, pc}
 8000ffc:	ab01      	add	r3, sp, #4
 8000ffe:	466a      	mov	r2, sp
 8001000:	f7ff ffc8 	bl	8000f94 <__swhatbuf_r>
 8001004:	9900      	ldr	r1, [sp, #0]
 8001006:	4605      	mov	r5, r0
 8001008:	4630      	mov	r0, r6
 800100a:	f000 f893 	bl	8001134 <_malloc_r>
 800100e:	b948      	cbnz	r0, 8001024 <__smakebuf_r+0x44>
 8001010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001014:	059a      	lsls	r2, r3, #22
 8001016:	d4ef      	bmi.n	8000ff8 <__smakebuf_r+0x18>
 8001018:	f023 0303 	bic.w	r3, r3, #3
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	81a3      	strh	r3, [r4, #12]
 8001022:	e7e3      	b.n	8000fec <__smakebuf_r+0xc>
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <__smakebuf_r+0x7c>)
 8001026:	62b3      	str	r3, [r6, #40]	; 0x28
 8001028:	89a3      	ldrh	r3, [r4, #12]
 800102a:	6020      	str	r0, [r4, #0]
 800102c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001030:	81a3      	strh	r3, [r4, #12]
 8001032:	9b00      	ldr	r3, [sp, #0]
 8001034:	6163      	str	r3, [r4, #20]
 8001036:	9b01      	ldr	r3, [sp, #4]
 8001038:	6120      	str	r0, [r4, #16]
 800103a:	b15b      	cbz	r3, 8001054 <__smakebuf_r+0x74>
 800103c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001040:	4630      	mov	r0, r6
 8001042:	f000 f973 	bl	800132c <_isatty_r>
 8001046:	b128      	cbz	r0, 8001054 <__smakebuf_r+0x74>
 8001048:	89a3      	ldrh	r3, [r4, #12]
 800104a:	f023 0303 	bic.w	r3, r3, #3
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	81a3      	strh	r3, [r4, #12]
 8001054:	89a0      	ldrh	r0, [r4, #12]
 8001056:	4305      	orrs	r5, r0
 8001058:	81a5      	strh	r5, [r4, #12]
 800105a:	e7cd      	b.n	8000ff8 <__smakebuf_r+0x18>
 800105c:	08000ded 	.word	0x08000ded

08001060 <_free_r>:
 8001060:	b538      	push	{r3, r4, r5, lr}
 8001062:	4605      	mov	r5, r0
 8001064:	2900      	cmp	r1, #0
 8001066:	d041      	beq.n	80010ec <_free_r+0x8c>
 8001068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800106c:	1f0c      	subs	r4, r1, #4
 800106e:	2b00      	cmp	r3, #0
 8001070:	bfb8      	it	lt
 8001072:	18e4      	addlt	r4, r4, r3
 8001074:	f000 f97c 	bl	8001370 <__malloc_lock>
 8001078:	4a1d      	ldr	r2, [pc, #116]	; (80010f0 <_free_r+0x90>)
 800107a:	6813      	ldr	r3, [r2, #0]
 800107c:	b933      	cbnz	r3, 800108c <_free_r+0x2c>
 800107e:	6063      	str	r3, [r4, #4]
 8001080:	6014      	str	r4, [r2, #0]
 8001082:	4628      	mov	r0, r5
 8001084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001088:	f000 b978 	b.w	800137c <__malloc_unlock>
 800108c:	42a3      	cmp	r3, r4
 800108e:	d908      	bls.n	80010a2 <_free_r+0x42>
 8001090:	6820      	ldr	r0, [r4, #0]
 8001092:	1821      	adds	r1, r4, r0
 8001094:	428b      	cmp	r3, r1
 8001096:	bf01      	itttt	eq
 8001098:	6819      	ldreq	r1, [r3, #0]
 800109a:	685b      	ldreq	r3, [r3, #4]
 800109c:	1809      	addeq	r1, r1, r0
 800109e:	6021      	streq	r1, [r4, #0]
 80010a0:	e7ed      	b.n	800107e <_free_r+0x1e>
 80010a2:	461a      	mov	r2, r3
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	b10b      	cbz	r3, 80010ac <_free_r+0x4c>
 80010a8:	42a3      	cmp	r3, r4
 80010aa:	d9fa      	bls.n	80010a2 <_free_r+0x42>
 80010ac:	6811      	ldr	r1, [r2, #0]
 80010ae:	1850      	adds	r0, r2, r1
 80010b0:	42a0      	cmp	r0, r4
 80010b2:	d10b      	bne.n	80010cc <_free_r+0x6c>
 80010b4:	6820      	ldr	r0, [r4, #0]
 80010b6:	4401      	add	r1, r0
 80010b8:	1850      	adds	r0, r2, r1
 80010ba:	4283      	cmp	r3, r0
 80010bc:	6011      	str	r1, [r2, #0]
 80010be:	d1e0      	bne.n	8001082 <_free_r+0x22>
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	6053      	str	r3, [r2, #4]
 80010c6:	4401      	add	r1, r0
 80010c8:	6011      	str	r1, [r2, #0]
 80010ca:	e7da      	b.n	8001082 <_free_r+0x22>
 80010cc:	d902      	bls.n	80010d4 <_free_r+0x74>
 80010ce:	230c      	movs	r3, #12
 80010d0:	602b      	str	r3, [r5, #0]
 80010d2:	e7d6      	b.n	8001082 <_free_r+0x22>
 80010d4:	6820      	ldr	r0, [r4, #0]
 80010d6:	1821      	adds	r1, r4, r0
 80010d8:	428b      	cmp	r3, r1
 80010da:	bf04      	itt	eq
 80010dc:	6819      	ldreq	r1, [r3, #0]
 80010de:	685b      	ldreq	r3, [r3, #4]
 80010e0:	6063      	str	r3, [r4, #4]
 80010e2:	bf04      	itt	eq
 80010e4:	1809      	addeq	r1, r1, r0
 80010e6:	6021      	streq	r1, [r4, #0]
 80010e8:	6054      	str	r4, [r2, #4]
 80010ea:	e7ca      	b.n	8001082 <_free_r+0x22>
 80010ec:	bd38      	pop	{r3, r4, r5, pc}
 80010ee:	bf00      	nop
 80010f0:	200000e0 	.word	0x200000e0

080010f4 <sbrk_aligned>:
 80010f4:	b570      	push	{r4, r5, r6, lr}
 80010f6:	4e0e      	ldr	r6, [pc, #56]	; (8001130 <sbrk_aligned+0x3c>)
 80010f8:	460c      	mov	r4, r1
 80010fa:	6831      	ldr	r1, [r6, #0]
 80010fc:	4605      	mov	r5, r0
 80010fe:	b911      	cbnz	r1, 8001106 <sbrk_aligned+0x12>
 8001100:	f000 f88c 	bl	800121c <_sbrk_r>
 8001104:	6030      	str	r0, [r6, #0]
 8001106:	4621      	mov	r1, r4
 8001108:	4628      	mov	r0, r5
 800110a:	f000 f887 	bl	800121c <_sbrk_r>
 800110e:	1c43      	adds	r3, r0, #1
 8001110:	d00a      	beq.n	8001128 <sbrk_aligned+0x34>
 8001112:	1cc4      	adds	r4, r0, #3
 8001114:	f024 0403 	bic.w	r4, r4, #3
 8001118:	42a0      	cmp	r0, r4
 800111a:	d007      	beq.n	800112c <sbrk_aligned+0x38>
 800111c:	1a21      	subs	r1, r4, r0
 800111e:	4628      	mov	r0, r5
 8001120:	f000 f87c 	bl	800121c <_sbrk_r>
 8001124:	3001      	adds	r0, #1
 8001126:	d101      	bne.n	800112c <sbrk_aligned+0x38>
 8001128:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800112c:	4620      	mov	r0, r4
 800112e:	bd70      	pop	{r4, r5, r6, pc}
 8001130:	200000e4 	.word	0x200000e4

08001134 <_malloc_r>:
 8001134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001138:	1ccd      	adds	r5, r1, #3
 800113a:	f025 0503 	bic.w	r5, r5, #3
 800113e:	3508      	adds	r5, #8
 8001140:	2d0c      	cmp	r5, #12
 8001142:	bf38      	it	cc
 8001144:	250c      	movcc	r5, #12
 8001146:	2d00      	cmp	r5, #0
 8001148:	4607      	mov	r7, r0
 800114a:	db01      	blt.n	8001150 <_malloc_r+0x1c>
 800114c:	42a9      	cmp	r1, r5
 800114e:	d905      	bls.n	800115c <_malloc_r+0x28>
 8001150:	230c      	movs	r3, #12
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	2600      	movs	r6, #0
 8001156:	4630      	mov	r0, r6
 8001158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800115c:	4e2e      	ldr	r6, [pc, #184]	; (8001218 <_malloc_r+0xe4>)
 800115e:	f000 f907 	bl	8001370 <__malloc_lock>
 8001162:	6833      	ldr	r3, [r6, #0]
 8001164:	461c      	mov	r4, r3
 8001166:	bb34      	cbnz	r4, 80011b6 <_malloc_r+0x82>
 8001168:	4629      	mov	r1, r5
 800116a:	4638      	mov	r0, r7
 800116c:	f7ff ffc2 	bl	80010f4 <sbrk_aligned>
 8001170:	1c43      	adds	r3, r0, #1
 8001172:	4604      	mov	r4, r0
 8001174:	d14d      	bne.n	8001212 <_malloc_r+0xde>
 8001176:	6834      	ldr	r4, [r6, #0]
 8001178:	4626      	mov	r6, r4
 800117a:	2e00      	cmp	r6, #0
 800117c:	d140      	bne.n	8001200 <_malloc_r+0xcc>
 800117e:	6823      	ldr	r3, [r4, #0]
 8001180:	4631      	mov	r1, r6
 8001182:	4638      	mov	r0, r7
 8001184:	eb04 0803 	add.w	r8, r4, r3
 8001188:	f000 f848 	bl	800121c <_sbrk_r>
 800118c:	4580      	cmp	r8, r0
 800118e:	d13a      	bne.n	8001206 <_malloc_r+0xd2>
 8001190:	6821      	ldr	r1, [r4, #0]
 8001192:	3503      	adds	r5, #3
 8001194:	1a6d      	subs	r5, r5, r1
 8001196:	f025 0503 	bic.w	r5, r5, #3
 800119a:	3508      	adds	r5, #8
 800119c:	2d0c      	cmp	r5, #12
 800119e:	bf38      	it	cc
 80011a0:	250c      	movcc	r5, #12
 80011a2:	4629      	mov	r1, r5
 80011a4:	4638      	mov	r0, r7
 80011a6:	f7ff ffa5 	bl	80010f4 <sbrk_aligned>
 80011aa:	3001      	adds	r0, #1
 80011ac:	d02b      	beq.n	8001206 <_malloc_r+0xd2>
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	442b      	add	r3, r5
 80011b2:	6023      	str	r3, [r4, #0]
 80011b4:	e00e      	b.n	80011d4 <_malloc_r+0xa0>
 80011b6:	6822      	ldr	r2, [r4, #0]
 80011b8:	1b52      	subs	r2, r2, r5
 80011ba:	d41e      	bmi.n	80011fa <_malloc_r+0xc6>
 80011bc:	2a0b      	cmp	r2, #11
 80011be:	d916      	bls.n	80011ee <_malloc_r+0xba>
 80011c0:	1961      	adds	r1, r4, r5
 80011c2:	42a3      	cmp	r3, r4
 80011c4:	6025      	str	r5, [r4, #0]
 80011c6:	bf18      	it	ne
 80011c8:	6059      	strne	r1, [r3, #4]
 80011ca:	6863      	ldr	r3, [r4, #4]
 80011cc:	bf08      	it	eq
 80011ce:	6031      	streq	r1, [r6, #0]
 80011d0:	5162      	str	r2, [r4, r5]
 80011d2:	604b      	str	r3, [r1, #4]
 80011d4:	4638      	mov	r0, r7
 80011d6:	f104 060b 	add.w	r6, r4, #11
 80011da:	f000 f8cf 	bl	800137c <__malloc_unlock>
 80011de:	f026 0607 	bic.w	r6, r6, #7
 80011e2:	1d23      	adds	r3, r4, #4
 80011e4:	1af2      	subs	r2, r6, r3
 80011e6:	d0b6      	beq.n	8001156 <_malloc_r+0x22>
 80011e8:	1b9b      	subs	r3, r3, r6
 80011ea:	50a3      	str	r3, [r4, r2]
 80011ec:	e7b3      	b.n	8001156 <_malloc_r+0x22>
 80011ee:	6862      	ldr	r2, [r4, #4]
 80011f0:	42a3      	cmp	r3, r4
 80011f2:	bf0c      	ite	eq
 80011f4:	6032      	streq	r2, [r6, #0]
 80011f6:	605a      	strne	r2, [r3, #4]
 80011f8:	e7ec      	b.n	80011d4 <_malloc_r+0xa0>
 80011fa:	4623      	mov	r3, r4
 80011fc:	6864      	ldr	r4, [r4, #4]
 80011fe:	e7b2      	b.n	8001166 <_malloc_r+0x32>
 8001200:	4634      	mov	r4, r6
 8001202:	6876      	ldr	r6, [r6, #4]
 8001204:	e7b9      	b.n	800117a <_malloc_r+0x46>
 8001206:	230c      	movs	r3, #12
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	4638      	mov	r0, r7
 800120c:	f000 f8b6 	bl	800137c <__malloc_unlock>
 8001210:	e7a1      	b.n	8001156 <_malloc_r+0x22>
 8001212:	6025      	str	r5, [r4, #0]
 8001214:	e7de      	b.n	80011d4 <_malloc_r+0xa0>
 8001216:	bf00      	nop
 8001218:	200000e0 	.word	0x200000e0

0800121c <_sbrk_r>:
 800121c:	b538      	push	{r3, r4, r5, lr}
 800121e:	4d06      	ldr	r5, [pc, #24]	; (8001238 <_sbrk_r+0x1c>)
 8001220:	2300      	movs	r3, #0
 8001222:	4604      	mov	r4, r0
 8001224:	4608      	mov	r0, r1
 8001226:	602b      	str	r3, [r5, #0]
 8001228:	f7ff fb36 	bl	8000898 <_sbrk>
 800122c:	1c43      	adds	r3, r0, #1
 800122e:	d102      	bne.n	8001236 <_sbrk_r+0x1a>
 8001230:	682b      	ldr	r3, [r5, #0]
 8001232:	b103      	cbz	r3, 8001236 <_sbrk_r+0x1a>
 8001234:	6023      	str	r3, [r4, #0]
 8001236:	bd38      	pop	{r3, r4, r5, pc}
 8001238:	200000e8 	.word	0x200000e8

0800123c <__sread>:
 800123c:	b510      	push	{r4, lr}
 800123e:	460c      	mov	r4, r1
 8001240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001244:	f000 f8a0 	bl	8001388 <_read_r>
 8001248:	2800      	cmp	r0, #0
 800124a:	bfab      	itete	ge
 800124c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800124e:	89a3      	ldrhlt	r3, [r4, #12]
 8001250:	181b      	addge	r3, r3, r0
 8001252:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001256:	bfac      	ite	ge
 8001258:	6563      	strge	r3, [r4, #84]	; 0x54
 800125a:	81a3      	strhlt	r3, [r4, #12]
 800125c:	bd10      	pop	{r4, pc}

0800125e <__swrite>:
 800125e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001262:	461f      	mov	r7, r3
 8001264:	898b      	ldrh	r3, [r1, #12]
 8001266:	05db      	lsls	r3, r3, #23
 8001268:	4605      	mov	r5, r0
 800126a:	460c      	mov	r4, r1
 800126c:	4616      	mov	r6, r2
 800126e:	d505      	bpl.n	800127c <__swrite+0x1e>
 8001270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001274:	2302      	movs	r3, #2
 8001276:	2200      	movs	r2, #0
 8001278:	f000 f868 	bl	800134c <_lseek_r>
 800127c:	89a3      	ldrh	r3, [r4, #12]
 800127e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001282:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001286:	81a3      	strh	r3, [r4, #12]
 8001288:	4632      	mov	r2, r6
 800128a:	463b      	mov	r3, r7
 800128c:	4628      	mov	r0, r5
 800128e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001292:	f000 b817 	b.w	80012c4 <_write_r>

08001296 <__sseek>:
 8001296:	b510      	push	{r4, lr}
 8001298:	460c      	mov	r4, r1
 800129a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800129e:	f000 f855 	bl	800134c <_lseek_r>
 80012a2:	1c43      	adds	r3, r0, #1
 80012a4:	89a3      	ldrh	r3, [r4, #12]
 80012a6:	bf15      	itete	ne
 80012a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80012aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80012ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80012b2:	81a3      	strheq	r3, [r4, #12]
 80012b4:	bf18      	it	ne
 80012b6:	81a3      	strhne	r3, [r4, #12]
 80012b8:	bd10      	pop	{r4, pc}

080012ba <__sclose>:
 80012ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012be:	f000 b813 	b.w	80012e8 <_close_r>
	...

080012c4 <_write_r>:
 80012c4:	b538      	push	{r3, r4, r5, lr}
 80012c6:	4d07      	ldr	r5, [pc, #28]	; (80012e4 <_write_r+0x20>)
 80012c8:	4604      	mov	r4, r0
 80012ca:	4608      	mov	r0, r1
 80012cc:	4611      	mov	r1, r2
 80012ce:	2200      	movs	r2, #0
 80012d0:	602a      	str	r2, [r5, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	f7ff fa93 	bl	80007fe <_write>
 80012d8:	1c43      	adds	r3, r0, #1
 80012da:	d102      	bne.n	80012e2 <_write_r+0x1e>
 80012dc:	682b      	ldr	r3, [r5, #0]
 80012de:	b103      	cbz	r3, 80012e2 <_write_r+0x1e>
 80012e0:	6023      	str	r3, [r4, #0]
 80012e2:	bd38      	pop	{r3, r4, r5, pc}
 80012e4:	200000e8 	.word	0x200000e8

080012e8 <_close_r>:
 80012e8:	b538      	push	{r3, r4, r5, lr}
 80012ea:	4d06      	ldr	r5, [pc, #24]	; (8001304 <_close_r+0x1c>)
 80012ec:	2300      	movs	r3, #0
 80012ee:	4604      	mov	r4, r0
 80012f0:	4608      	mov	r0, r1
 80012f2:	602b      	str	r3, [r5, #0]
 80012f4:	f7ff fa9f 	bl	8000836 <_close>
 80012f8:	1c43      	adds	r3, r0, #1
 80012fa:	d102      	bne.n	8001302 <_close_r+0x1a>
 80012fc:	682b      	ldr	r3, [r5, #0]
 80012fe:	b103      	cbz	r3, 8001302 <_close_r+0x1a>
 8001300:	6023      	str	r3, [r4, #0]
 8001302:	bd38      	pop	{r3, r4, r5, pc}
 8001304:	200000e8 	.word	0x200000e8

08001308 <_fstat_r>:
 8001308:	b538      	push	{r3, r4, r5, lr}
 800130a:	4d07      	ldr	r5, [pc, #28]	; (8001328 <_fstat_r+0x20>)
 800130c:	2300      	movs	r3, #0
 800130e:	4604      	mov	r4, r0
 8001310:	4608      	mov	r0, r1
 8001312:	4611      	mov	r1, r2
 8001314:	602b      	str	r3, [r5, #0]
 8001316:	f7ff fa99 	bl	800084c <_fstat>
 800131a:	1c43      	adds	r3, r0, #1
 800131c:	d102      	bne.n	8001324 <_fstat_r+0x1c>
 800131e:	682b      	ldr	r3, [r5, #0]
 8001320:	b103      	cbz	r3, 8001324 <_fstat_r+0x1c>
 8001322:	6023      	str	r3, [r4, #0]
 8001324:	bd38      	pop	{r3, r4, r5, pc}
 8001326:	bf00      	nop
 8001328:	200000e8 	.word	0x200000e8

0800132c <_isatty_r>:
 800132c:	b538      	push	{r3, r4, r5, lr}
 800132e:	4d06      	ldr	r5, [pc, #24]	; (8001348 <_isatty_r+0x1c>)
 8001330:	2300      	movs	r3, #0
 8001332:	4604      	mov	r4, r0
 8001334:	4608      	mov	r0, r1
 8001336:	602b      	str	r3, [r5, #0]
 8001338:	f7ff fa97 	bl	800086a <_isatty>
 800133c:	1c43      	adds	r3, r0, #1
 800133e:	d102      	bne.n	8001346 <_isatty_r+0x1a>
 8001340:	682b      	ldr	r3, [r5, #0]
 8001342:	b103      	cbz	r3, 8001346 <_isatty_r+0x1a>
 8001344:	6023      	str	r3, [r4, #0]
 8001346:	bd38      	pop	{r3, r4, r5, pc}
 8001348:	200000e8 	.word	0x200000e8

0800134c <_lseek_r>:
 800134c:	b538      	push	{r3, r4, r5, lr}
 800134e:	4d07      	ldr	r5, [pc, #28]	; (800136c <_lseek_r+0x20>)
 8001350:	4604      	mov	r4, r0
 8001352:	4608      	mov	r0, r1
 8001354:	4611      	mov	r1, r2
 8001356:	2200      	movs	r2, #0
 8001358:	602a      	str	r2, [r5, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	f7ff fa8f 	bl	800087e <_lseek>
 8001360:	1c43      	adds	r3, r0, #1
 8001362:	d102      	bne.n	800136a <_lseek_r+0x1e>
 8001364:	682b      	ldr	r3, [r5, #0]
 8001366:	b103      	cbz	r3, 800136a <_lseek_r+0x1e>
 8001368:	6023      	str	r3, [r4, #0]
 800136a:	bd38      	pop	{r3, r4, r5, pc}
 800136c:	200000e8 	.word	0x200000e8

08001370 <__malloc_lock>:
 8001370:	4801      	ldr	r0, [pc, #4]	; (8001378 <__malloc_lock+0x8>)
 8001372:	f7ff be0d 	b.w	8000f90 <__retarget_lock_acquire_recursive>
 8001376:	bf00      	nop
 8001378:	200000dc 	.word	0x200000dc

0800137c <__malloc_unlock>:
 800137c:	4801      	ldr	r0, [pc, #4]	; (8001384 <__malloc_unlock+0x8>)
 800137e:	f7ff be08 	b.w	8000f92 <__retarget_lock_release_recursive>
 8001382:	bf00      	nop
 8001384:	200000dc 	.word	0x200000dc

08001388 <_read_r>:
 8001388:	b538      	push	{r3, r4, r5, lr}
 800138a:	4d07      	ldr	r5, [pc, #28]	; (80013a8 <_read_r+0x20>)
 800138c:	4604      	mov	r4, r0
 800138e:	4608      	mov	r0, r1
 8001390:	4611      	mov	r1, r2
 8001392:	2200      	movs	r2, #0
 8001394:	602a      	str	r2, [r5, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	f7ff fa14 	bl	80007c4 <_read>
 800139c:	1c43      	adds	r3, r0, #1
 800139e:	d102      	bne.n	80013a6 <_read_r+0x1e>
 80013a0:	682b      	ldr	r3, [r5, #0]
 80013a2:	b103      	cbz	r3, 80013a6 <_read_r+0x1e>
 80013a4:	6023      	str	r3, [r4, #0]
 80013a6:	bd38      	pop	{r3, r4, r5, pc}
 80013a8:	200000e8 	.word	0x200000e8

080013ac <_init>:
 80013ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ae:	bf00      	nop
 80013b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013b2:	bc08      	pop	{r3}
 80013b4:	469e      	mov	lr, r3
 80013b6:	4770      	bx	lr

080013b8 <_fini>:
 80013b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ba:	bf00      	nop
 80013bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013be:	bc08      	pop	{r3}
 80013c0:	469e      	mov	lr, r3
 80013c2:	4770      	bx	lr
